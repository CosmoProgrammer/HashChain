import React from 'react';
import ReactDOM from 'react-dom/client';

/**
 *
 * @param element
 * @param reactComponent
 * @constructor
 */
function ReactSlot(element, reactComponent) {
  this.element = element;
  this.reactComponent = reactComponent;
  this.isRendered = false;
  this.hasFailed = false;
}

/**
 *
 * @param selector {string}
 * @param component
 * @param isCustomRender {boolean}
 * @constructor
 */
function ReactComponent(selector, component) {
  var isCustomRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  this.selector = selector;
  this.component = component;
  this.isCustomRender = isCustomRender;
}

/**
 * @param value
 * @return {string}
 */
var lowercaseFirstLetter = function lowercaseFirstLetter(value) {
  return value.charAt(0).toLowerCase() + value.substr(1);
};

/**
 * {[object]}
 */

var castResolvers = [{
  name: "castNumber",
  handler: function handler(value) {
    return parseInt(value);
  }
}, {
  name: "castFloat",
  handler: function handler(value) {
    return parseFloat(value);
  }
}, {
  name: "castJson",
  handler: function handler(value) {
    if (value === "") {
      return null;
    } else {
      return JSON.parse(value);
    }
  }
}, {
  name: "castBoolean",
  handler: function handler(value) {
    if (value === "") {
      return null;
    } else if (["true", "false"].includes(value.toString())) {
      return value.toString() === "true";
    } else if (["1", "0"].includes(value.toString())) {
      return value.toString() === "1";
    } else {
      return null;
    }
  }
}, {
  name: "castString",
  handler: function handler(value) {
    return value;
  }
}];
/**
 * @param key {string}
 * @param value {any}
 * @constructor
 */

function CastDto(key, value) {
  this.key = key;
  this.value = value;
}
/**
 * @param key {string}
 * @param value {string}
 * @return {CastDto}
 */


var cast = function cast(key, value) {
  var castResolver = null;

  for (var i = 0; i < castResolvers.length; i++) {
    if (castResolvers[i].name === key.substr(0, castResolvers[i].name.length)) {
      castResolver = castResolvers[i];
      break;
    }
  }

  if (!castResolver) {
    throw new Error("[ReactSupervisor] cast resolver not found.");
  }

  var newKey = lowercaseFirstLetter(key.substr(castResolver.name.length));

  if (newKey === "") {
    throw new Error("[ReactSupervisor] missing property name.");
  }

  var newValue = castResolver.handler(value);
  return new CastDto(newKey, newValue);
};
/**
 * @param key
 * @return {boolean}
 */


var isCastable = function isCastable(key) {
  return key.substr(0, 4) === "cast";
};

/**
 * @param element {HTMLElement}
 * @return {Object}
 */

var extractProps = function extractProps(element) {
  var result = {};

  for (var key in element.dataset) {
    if (element.dataset.hasOwnProperty(key)) {
      if (isCastable(key)) {
        var castedDto = cast(key, element.dataset[key]);
        result[castedDto.key] = castedDto.value;
      } else {
        result[key] = element.dataset[key];
      }
    }
  }

  return result;
};

function ReactSupervisor$1() {
  var _this = this;

  /**
   * @type {boolean}
   */
  var isInitialized = false;
  /**
   * @type {ReactSlot[]}
   */

  var slots = [];
  /**
   * @type {ReactComponent[]}
   */

  var components = [];
  /**
   * @type {*}
   */

  /**
  * @type {null|number}
  */

  var watchInterval = null;

  var watch = function watch() {
    for (var i = 0; i < components.length; i++) {
      var elements = document.querySelectorAll("".concat(components[i].selector, ":not(.rendered)"));

      for (var j = 0; j < elements.length; j++) {
        console.log(components[i]);
        renderReactSlot(elements[j], components[i]);
      }
    }
  };

  var renderReactSlot = function renderReactSlot(element, reactComponent) {
    var slot = new ReactSlot(element, reactComponent);
    slot.element.classList.add("rendered");

    try {
      var props = extractProps(element);

      if (slot.reactComponent.isCustomRender) {
        slot.reactComponent.component(element, props);
      } else {
        var ComponentToRender = slot.reactComponent.component;
        var root = ReactDOM.createRoot(element);
        root.render( /*#__PURE__*/React.createElement(ComponentToRender, props));
      }

      slot.isRendered = true;
      console.info("[ReactSupervisor] ReactSlot has been rendered.");
    } catch (e) {
      slot.isRendered = true;
      slot.hasFailed = true;
      console.error("[ReactSupervisor] ReactSlot render has failed.");
    }

    slots.push(slot);
  };

  this.initialize = function () {
    if (isInitialized) {
      console.warn("[ReactSupervisor] ReactSupervisor is already initialized.");
    } else {
      isInitialized = true;

      _this.forceRender();

      watchInterval = setInterval(watch, 5000);
      console.info("[ReactSupervisor] ReactSupervisor has been initialized.");
    }
  };

  this.forceRender = function () {
    watch();
  };

  this.info = function () {
    console.table(slots);
    console.table(components);
    console.info("Rendered count ".concat(document.querySelectorAll(".rendered").length));
  };
  /**
   *
   * @param selector
   * @param component
   * @return void
   */


  this.registerComponent = function (selector, component) {
    var isAlreadyRegistered = components.filter(function (item) {
      return item.selector === selector;
    }).length > 0;

    if (isAlreadyRegistered) {
      console.warn("[ReactSupervisor] Selector: \"".concat(selector, "\" is already registered, item has been skipped."));
      return;
    }

    components.push(new ReactComponent(selector, component));
    console.log("[ReactSupervisor] ReactComponent has been registered.");
  };

  this.registerComponentWithCustomRender = function (selector, customRender) {
    var isAlreadyRegistered = components.filter(function (item) {
      return item.selector === selector;
    }).length > 0;

    if (isAlreadyRegistered) {
      console.warn("[ReactSupervisor] Selector: \"".concat(selector, "\" is already registered, item has been skipped."));
      return;
    }

    components.push(new ReactComponent(selector, customRender, true));
    console.log("[ReactSupervisor] ReactComponent has been registered.");
  };
  /**
   * @return {boolean}
   */


  this.getIsInitialized = function () {
    return isInitialized;
  };
  /**
   * @return {ReactSlot[]}
   */


  this.getSlots = function () {
    return slots;
  };
  /**
   * @return {ReactComponent[]}
   */


  this.getComponents = function () {
    return components;
  };
  /**
   * @return {null|number}
   */


  this.getWatchInterval = function () {
    return watchInterval;
  };
}

var ReactSupervisor = new ReactSupervisor$1();

export { ReactSupervisor };
//# sourceMappingURL=index.js.map
